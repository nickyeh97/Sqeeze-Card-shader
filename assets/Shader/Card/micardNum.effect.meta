{
  "ver": "1.0.25",
  "uuid": "7af8f464-5c89-48c1-be7e-a6410e3a9b27",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nuniform float sprWidth;\nuniform float sprHight;\nuniform float worldSprWidth;\nuniform float worldSprHeight;\nuniform vec2 disX;\nuniform vec2 disY;\nuniform vec2 disYSymmetricPos;\nuniform vec2 disXSymmetricPos;\nuniform vec2 worldPos;\nuniform vec4 xlist;\nuniform vec4 ylist;\nuniform vec4 xlistSymmetricPos;\nuniform vec4 ylistSymmetricPos;\nvarying highp float v_sprWidth;\nvarying highp float v_sprHight;\nvarying highp vec4 v_xlist;\nvarying highp vec4 v_ylist;\nvarying highp vec2 v_disX;\nvarying highp vec2 v_disY;\nvec2 getSymmetricPos(vec2 sp,vec2 pos1, vec2 pos2)\n{\n  float disX = pos2.x - pos1.x;\n  float disY = pos2.y - pos1.y;\n  if (disX == 0.0)\n  {\n      float x = pos1.x - sp.x;\n      return vec2(pos1.x + x,sp.y);\n  }\n  float m = disY/disX;\n  float y = (sp.y*m*m  + sp.x*m + m*sp.x - m*pos1.x*2.0 + pos1.y*2.0 - sp.y)/(1.0+m*m);\n  float x = (y - sp.y)/(-1.0/m)+sp.x;\n  return vec2(x,y);\n}\nvoid main () {\n  v_sprWidth = sprWidth;\n  v_sprHight = sprHight;\n  v_xlist = xlist;\n  v_ylist = ylist;\n  v_disX = disX;\n  v_disY = disY;\n  vec2 pos1 = vec2(0.0,0.0);\n  vec2 pos2 = vec2(0.0,0.0);\n  if (disXSymmetricPos[0] != 0.0 || disXSymmetricPos[1] != 0.0)\n  {\n    if (disXSymmetricPos[0] == 0.0)\n    {\n        pos1 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y);\n        pos2 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y+worldSprHeight);\n    }\n    else\n    {\n        pos1 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y);\n        pos2 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y+worldSprHeight);\n    }\n  }\n  else if (disYSymmetricPos[0] != 0.0 || disYSymmetricPos[1] != 0.0)\n  {\n    if (disYSymmetricPos[0] == 0.0)\n    {\n        pos1 = vec2(worldPos.x,(worldSprHeight - disYSymmetricPos[1]) + worldPos.y);\n        pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[1]) + worldPos.y);\n    }\n    else\n    {\n        pos1 = vec2(worldPos.x, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);\n        pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);\n    }\n  }\n  else if(xlistSymmetricPos.x != 0.0 || xlistSymmetricPos.y != 0.0 || xlistSymmetricPos.z != 0.0){\n    pos1 = vec2(xlistSymmetricPos.y+worldPos.x,worldSprHeight - ylistSymmetricPos.y + worldPos.y);\n    pos2 = vec2(xlistSymmetricPos.z+worldPos.x,worldSprHeight - ylistSymmetricPos.z + worldPos.y);\n  }\n  vec2 sp = vec2(a_position.x, a_position.y);\n  vec2 symmetricPos = getSymmetricPos(sp,pos1,pos2);\n  vec4 tmp_pos = vec4(a_position.x, a_position.y,a_position.z, 1.0);\n  tmp_pos.x = symmetricPos.x ;\n  tmp_pos.y = symmetricPos.y ;\n  mat4 mvp = cc_matViewProj;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = mvp * tmp_pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvarying float v_sprWidth;\nvarying float v_sprHight;\nvarying highp vec4 v_xlist;\nvarying highp vec4 v_ylist;\nvarying highp vec2 v_disX;\nvarying highp vec2 v_disY;\nbool isHide(float px , float py)\n{\n  bool b = false;\n  float dx = px * v_sprWidth;\n  float dy = py * v_sprHight;\n  if (v_disX[0] != 0.0 || v_disX[1] != 0.0)\n  {\n      if (dx >= v_disX[0] && dx <= v_disX[1]){\n          return true;\n      }\n  }\n  else if (v_disY[0] != 0.0 || v_disY[1] != 0.0)\n  {\n      if (dy >= v_disY[0] && dy <= v_disY[1]){\n          return true;\n      }\n  }\n  if ( ((v_ylist[0]>=dy) != (v_ylist[2]>=dy)) && (dx < (v_xlist[2]-v_xlist[0]) * (dy-v_ylist[0]) / (v_ylist[2]-v_ylist[0]) + v_xlist[0]) )\n  {\n    b = !b;\n  }\n  if ( ((v_ylist[1]>=dy) != (v_ylist[0]>=dy)) && (dx < (v_xlist[0]-v_xlist[1]) * (dy-v_ylist[1]) / (v_ylist[0]-v_ylist[1]) + v_xlist[1]) )\n  {\n    b = !b;\n  }\n  if ( ((v_ylist[2]>=dy) != (v_ylist[1]>=dy)) && (dx < (v_xlist[1]-v_xlist[2]) * (dy-v_ylist[2]) / (v_ylist[1]-v_ylist[2]) + v_xlist[2]) )\n  {\n    b = !b;\n  }\n  return b;\n}\nvoid main () {\n  vec4 color = texture2D(texture, v_uv0);\n  bool hide = isHide(v_uv0.x,v_uv0.y);\n  if (!hide)\n  {\n      color.a = 0.0;\n  }\n  gl_FragColor = v_color*color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nuniform PROPERTIES{\n  float sprWidth;\n  float sprHight;\n  float worldSprWidth;\n  float worldSprHeight;\n  vec2 disX;\n  vec2 disY;\n  vec2 disYSymmetricPos;\n  vec2 disXSymmetricPos;\n  vec2 worldPos;\n  vec2 _padding;\n  vec4 xlist;\n  vec4 ylist;\n  vec4 xlistSymmetricPos;\n  vec4 ylistSymmetricPos;\n};\nout highp float v_sprWidth;\nout highp float v_sprHight;\nout highp vec4 v_xlist;\nout highp vec4 v_ylist;\nout highp vec2 v_disX;\nout highp vec2 v_disY;\nvec2 getSymmetricPos(vec2 sp,vec2 pos1, vec2 pos2)\n{\n  float disX = pos2.x - pos1.x;\n  float disY = pos2.y - pos1.y;\n  if (disX == 0.0)\n  {\n      float x = pos1.x - sp.x;\n      return vec2(pos1.x + x,sp.y);\n  }\n  float m = disY/disX;\n  float y = (sp.y*m*m  + sp.x*m + m*sp.x - m*pos1.x*2.0 + pos1.y*2.0 - sp.y)/(1.0+m*m);\n  float x = (y - sp.y)/(-1.0/m)+sp.x;\n  return vec2(x,y);\n}\nvoid main () {\n  v_sprWidth = sprWidth;\n  v_sprHight = sprHight;\n  v_xlist = xlist;\n  v_ylist = ylist;\n  v_disX = disX;\n  v_disY = disY;\n  vec2 pos1 = vec2(0.0,0.0);\n  vec2 pos2 = vec2(0.0,0.0);\n  if (disXSymmetricPos[0] != 0.0 || disXSymmetricPos[1] != 0.0)\n  {\n    if (disXSymmetricPos[0] == 0.0)\n    {\n        pos1 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y);\n        pos2 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y+worldSprHeight);\n    }\n    else\n    {\n        pos1 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y);\n        pos2 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y+worldSprHeight);\n    }\n  }\n  else if (disYSymmetricPos[0] != 0.0 || disYSymmetricPos[1] != 0.0)\n  {\n    if (disYSymmetricPos[0] == 0.0)\n    {\n        pos1 = vec2(worldPos.x,(worldSprHeight - disYSymmetricPos[1]) + worldPos.y);\n        pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[1]) + worldPos.y);\n    }\n    else\n    {\n        pos1 = vec2(worldPos.x, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);\n        pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);\n    }\n  }\n  else if(xlistSymmetricPos.x != 0.0 || xlistSymmetricPos.y != 0.0 || xlistSymmetricPos.z != 0.0){\n    pos1 = vec2(xlistSymmetricPos.y+worldPos.x,worldSprHeight - ylistSymmetricPos.y + worldPos.y);\n    pos2 = vec2(xlistSymmetricPos.z+worldPos.x,worldSprHeight - ylistSymmetricPos.z + worldPos.y);\n  }\n  vec2 sp = vec2(a_position.x, a_position.y);\n  vec2 symmetricPos = getSymmetricPos(sp,pos1,pos2);\n  vec4 tmp_pos = vec4(a_position.x, a_position.y,a_position.z, 1.0);\n  tmp_pos.x = symmetricPos.x ;\n  tmp_pos.y = symmetricPos.y ;\n  mat4 mvp = cc_matViewProj;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = mvp * tmp_pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvarying float v_sprWidth;\nvarying float v_sprHight;\nvarying highp vec4 v_xlist;\nvarying highp vec4 v_ylist;\nvarying highp vec2 v_disX;\nvarying highp vec2 v_disY;\nbool isHide(float px , float py)\n{\n  bool b = false;\n  float dx = px * v_sprWidth;\n  float dy = py * v_sprHight;\n  if (v_disX[0] != 0.0 || v_disX[1] != 0.0)\n  {\n      if (dx >= v_disX[0] && dx <= v_disX[1]){\n          return true;\n      }\n  }\n  else if (v_disY[0] != 0.0 || v_disY[1] != 0.0)\n  {\n      if (dy >= v_disY[0] && dy <= v_disY[1]){\n          return true;\n      }\n  }\n  if ( ((v_ylist[0]>=dy) != (v_ylist[2]>=dy)) && (dx < (v_xlist[2]-v_xlist[0]) * (dy-v_ylist[0]) / (v_ylist[2]-v_ylist[0]) + v_xlist[0]) )\n  {\n    b = !b;\n  }\n  if ( ((v_ylist[1]>=dy) != (v_ylist[0]>=dy)) && (dx < (v_xlist[0]-v_xlist[1]) * (dy-v_ylist[1]) / (v_ylist[0]-v_ylist[1]) + v_xlist[1]) )\n  {\n    b = !b;\n  }\n  if ( ((v_ylist[2]>=dy) != (v_ylist[1]>=dy)) && (dx < (v_xlist[1]-v_xlist[2]) * (dy-v_ylist[2]) / (v_ylist[1]-v_ylist[2]) + v_xlist[2]) )\n  {\n    b = !b;\n  }\n  return b;\n}\nvoid main () {\n  vec4 color = texture2D(texture, v_uv0);\n  bool hide = isHide(v_uv0.x,v_uv0.y);\n  if (!hide)\n  {\n      color.a = 0.0;\n  }\n  gl_FragColor = v_color*color;\n}"
      }
    }
  ],
  "subMetas": {}
}